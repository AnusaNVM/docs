"use strict";(self.webpackChunknvm_docs=self.webpackChunknvm_docs||[]).push([[7097],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),g=o(n),m=r,c=g["".concat(p,".").concat(m)]||g[m]||u[m]||l;return n?a.createElement(c,i(i({ref:t},d),{},{components:n})):a.createElement(c,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1402:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return u}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),i=["components"],s={title:"GATEWAY v1.0.0",language_tabs:[{shell:"Shell"},{http:"HTTP"},{javascript:"JavaScript"},{ruby:"Ruby"},{python:"Python"},{php:"PHP"},{java:"Java"},{go:"Go"}],toc_footers:[],includes:[],search:!0,highlight_theme:"darkula",headingLevel:2},p=void 0,o={unversionedId:"architecture/gateway/openapi",id:"architecture/gateway/openapi",title:"GATEWAY v1.0.0",description:"GATEWAY v1.0.0",source:"@site/docs/architecture/gateway/openapi.md",sourceDirName:"architecture/gateway",slug:"/architecture/gateway/openapi",permalink:"/docs/architecture/gateway/openapi",draft:!1,editUrl:"https://github.com/nevermined-io/nvm-docs/tree/main/docs/architecture/gateway/openapi.md",tags:[],version:"current",frontMatter:{title:"GATEWAY v1.0.0",language_tabs:[{shell:"Shell"},{http:"HTTP"},{javascript:"JavaScript"},{ruby:"Ruby"},{python:"Python"},{php:"PHP"},{java:"Java"},{go:"Go"}],toc_footers:[],includes:[],search:!0,highlight_theme:"darkula",headingLevel:2},sidebar:"tutorialSidebar",previous:{title:"Gateway",permalink:"/docs/architecture/gateway/"},next:{title:"Marketplace API",permalink:"/docs/category/marketplace-api"}},d={},u=[{value:"get_<em>api_v1_gateway_services_access-proof</em>{agreement_id}",id:"get_api_v1_gateway_services_access-proofagreement_id",level:2},{value:"get_<em>api_v1_gateway_services_access-proof</em>{agreement<em>id}</em>{index}",id:"get_api_v1_gateway_services_access-proofagreementidindex",level:2},{value:"get_<em>api_v1_gateway_services_access</em>{agreement_id}",id:"get_api_v1_gateway_services_accessagreement_id",level:2},{value:"get_<em>api_v1_gateway_services_access</em>{agreement<em>id}</em>{index}",id:"get_api_v1_gateway_services_accessagreementidindex",level:2},{value:"get_<em>api_v1_gateway_services_compute_logs</em>{agreement<em>id}</em>{execution_id}",id:"get_api_v1_gateway_services_compute_logsagreementidexecution_id",level:2},{value:"get_<em>api_v1_gateway_services_compute_status</em>{agreement<em>id}</em>{execution_id}",id:"get_api_v1_gateway_services_compute_statusagreementidexecution_id",level:2},{value:"get__api_v1_gateway_services_consume",id:"get__api_v1_gateway_services_consume",level:2},{value:"get_<em>api_v1_gateway_services_download</em>{index}",id:"get_api_v1_gateway_services_downloadindex",level:2},{value:"post__api_v1_gateway_services_encrypt",id:"post__api_v1_gateway_services_encrypt",level:2},{value:"post__api_v1_gateway_services_exec",id:"post__api_v1_gateway_services_exec",level:2},{value:"post_<em>api_v1_gateway_services_execute</em>{agreement_id}",id:"post_api_v1_gateway_services_executeagreement_id",level:2},{value:"get_<em>api_v1_gateway_services_nft-access-proof</em>{agreement_id}",id:"get_api_v1_gateway_services_nft-access-proofagreement_id",level:2},{value:"get_<em>api_v1_gateway_services_nft-access-proof</em>{agreement<em>id}</em>{index}",id:"get_api_v1_gateway_services_nft-access-proofagreementidindex",level:2},{value:"get_<em>api_v1_gateway_services_nft-access</em>{agreement_id}",id:"get_api_v1_gateway_services_nft-accessagreement_id",level:2},{value:"get_<em>api_v1_gateway_services_nft-access</em>{agreement<em>id}</em>{index}",id:"get_api_v1_gateway_services_nft-accessagreementidindex",level:2},{value:"post__api_v1_gateway_services_nft-transfer",id:"post__api_v1_gateway_services_nft-transfer",level:2},{value:"post__api_v1_gateway_services_nft-transfer-with-access",id:"post__api_v1_gateway_services_nft-transfer-with-access",level:2},{value:"post__api_v1_gateway_services_publish",id:"post__api_v1_gateway_services_publish",level:2}],g={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"gateway"},"GATEWAY v1.0.0"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.")),(0,l.kt)("p",null,"Gateway is the technical component executed by Publishers allowing them to provide extended data services. When running with our Docker images, it is exposed under ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:8030"),"."),(0,l.kt)("h1",{id:"gateway-services"},"services"),(0,l.kt)("h2",{id:"get_api_v1_gateway_services_access-proofagreement_id"},"get_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_access-proof"),"{agreement_id}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/access-proof/{agreement_id} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/access-proof/{agreement_id} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/access-proof/{agreement_id}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/access-proof/{agreement_id}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.get('/api/v1/gateway/services/access-proof/{agreement_id}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/access-proof/{agreement_id}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/access-proof/{agreement_id}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/access-proof/{agreement_id}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/access-proof/{agreement_id}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows to get access to an asset data file.")),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_access-proof_{agreement_id}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"agreement_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Index of the file in the array of files.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_access-proof_{agreement_id}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the file binary"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"get_api_v1_gateway_services_access-proofagreementidindex"},"get_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_access-proof"),"{agreement",(0,l.kt)("em",{parentName:"h2"},"id}"),"{index}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/access-proof/{agreement_id}/{index} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/access-proof/{agreement_id}/{index} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/access-proof/{agreement_id}/{index}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/access-proof/{agreement_id}/{index}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.get('/api/v1/gateway/services/access-proof/{agreement_id}/{index}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/access-proof/{agreement_id}/{index}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/access-proof/{agreement_id}/{index}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/access-proof/{agreement_id}/{index}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/access-proof/{agreement_id}/{index}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows to get access to an asset data file.")),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_access-proof_{agreement_id}_{index}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"agreement_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Index of the file in the array of files.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_access-proof_{agreement_id}_{index}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the file binary"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"get_api_v1_gateway_services_accessagreement_id"},"get_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_access"),"{agreement_id}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/access/{agreement_id} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/access/{agreement_id} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/access/{agreement_id}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/access/{agreement_id}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.get('/api/v1/gateway/services/access/{agreement_id}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/access/{agreement_id}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/access/{agreement_id}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/access/{agreement_id}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/access/{agreement_id}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows to get access to an asset data file.")),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_access_{agreement_id}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"agreement_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Index of the file in the array of files.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_access_{agreement_id}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the file binary"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"get_api_v1_gateway_services_accessagreementidindex"},"get_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_access"),"{agreement",(0,l.kt)("em",{parentName:"h2"},"id}"),"{index}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/access/{agreement_id}/{index} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/access/{agreement_id}/{index} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/access/{agreement_id}/{index}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/access/{agreement_id}/{index}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.get('/api/v1/gateway/services/access/{agreement_id}/{index}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/access/{agreement_id}/{index}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/access/{agreement_id}/{index}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/access/{agreement_id}/{index}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/access/{agreement_id}/{index}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows to get access to an asset data file.")),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_access_{agreement_id}_{index}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"agreement_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Index of the file in the array of files.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_access_{agreement_id}_{index}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the file binary"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"get_api_v1_gateway_services_compute_logsagreementidexecution_id"},"get_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_compute_logs"),"{agreement",(0,l.kt)("em",{parentName:"h2"},"id}"),"{execution_id}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/compute/logs/{agreement_id}/{execution_id} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/compute/logs/{agreement_id}/{execution_id} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/compute/logs/{agreement_id}/{execution_id}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/compute/logs/{agreement_id}/{execution_id}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.get('/api/v1/gateway/services/compute/logs/{agreement_id}/{execution_id}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/compute/logs/{agreement_id}/{execution_id}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/compute/logs/{agreement_id}/{execution_id}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/compute/logs/{agreement_id}/{execution_id}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/compute/logs/{agreement_id}/{execution_id}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows to get access to logs associated to a compute execution")),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_compute_logs_{agreement_id}_{execution_id}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"agreement_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"execution_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the execution associated to a service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_compute_logs_{agreement_id}_{execution_id}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the execution logs"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"get_api_v1_gateway_services_compute_statusagreementidexecution_id"},"get_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_compute_status"),"{agreement",(0,l.kt)("em",{parentName:"h2"},"id}"),"{execution_id}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/compute/status/{agreement_id}/{execution_id} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/compute/status/{agreement_id}/{execution_id} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/compute/status/{agreement_id}/{execution_id}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/compute/status/{agreement_id}/{execution_id}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.get('/api/v1/gateway/services/compute/status/{agreement_id}/{execution_id}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/compute/status/{agreement_id}/{execution_id}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/compute/status/{agreement_id}/{execution_id}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/compute/status/{agreement_id}/{execution_id}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/compute/status/{agreement_id}/{execution_id}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows to get access to logs associated to a compute execution")),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_compute_status_{agreement_id}_{execution_id}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"agreement_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"execution_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the execution associated to a service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_compute_status_{agreement_id}_{execution_id}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the execution logs"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"get__api_v1_gateway_services_consume"},"get__api_v1_gateway_services_consume"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/consume?consumerAddress=string&serviceAgreementId=string&url=string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/consume?consumerAddress=string&serviceAgreementId=string&url=string HTTP/1.1\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nfetch('/api/v1/gateway/services/consume?consumerAddress=string&serviceAgreementId=string&url=string',\n{\n  method: 'GET'\n\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nresult = RestClient.get '/api/v1/gateway/services/consume',\n  params: {\n  'consumerAddress' => 'string',\n'serviceAgreementId' => 'string',\n'url' => 'string'\n}\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\n\nr = requests.get('/api/v1/gateway/services/consume', params={\n  'consumerAddress': 'string',  'serviceAgreementId': 'string',  'url': 'string'\n})\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/consume', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/consume?consumerAddress=string&serviceAgreementId=string&url=string");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/consume", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/consume")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows download of asset data file.")),(0,l.kt)("p",null,"Method deprecated, it will be replaced by ",(0,l.kt)("inlineCode",{parentName:"p"},"/access")," in further versions"),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_consume-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"consumerAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The consumer address.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"serviceAgreementId"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"url"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"This URL is only valid if Nevermined Gateway acts as a proxy. Consumer can't download using the URL if it's not through Nevermined Gateway.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"signature"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Signature of the documentId to verify that the consumer has rights to download the asset.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Index of the file in the array of files.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_consume-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Redirect to valid asset url."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"400"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.5.1"},"Bad Request")),(0,l.kt)("td",{parentName:"tr",align:null},"One of the required attributes is missing."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid asset data."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"get_api_v1_gateway_services_downloadindex"},"get_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_download"),"{index}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/download/{index} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/download/{index} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/download/{index}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/download/{index}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.get('/api/v1/gateway/services/download/{index}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/download/{index}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/download/{index}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/download/{index}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/download/{index}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows to download the files of an asset if you are the owner or provider of the asset.")),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_download_{index}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Index of the file in the array of files.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_download_{index}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the valid file binary."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"post__api_v1_gateway_services_encrypt"},"post__api_v1_gateway_services_encrypt"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X POST /api/v1/gateway/services/encrypt \\\n  -H 'Content-Type: application/json'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"POST /api/v1/gateway/services/encrypt HTTP/1.1\n\nContent-Type: application/json\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const inputBody = \'{\n  "did": "did:nv:08a429b8529856d59867503f8056903a680935a76950bb9649785cc97869a43d",\n  "message": "{\\"url\\":\\"https://keyko.io/\\",\\"index\\":0,\\"checksum\\":\\"efb21\\",\\"contentLength\\":\\"45\\",\\"contentType\\":\\"text/csv\\"}",\n  "method": "PSK-RSA"\n}\';\nconst headers = {\n  \'Content-Type\':\'application/json\'\n};\n\nfetch(\'/api/v1/gateway/services/encrypt\',\n{\n  method: \'POST\',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json'\n}\n\nresult = RestClient.post '/api/v1/gateway/services/encrypt',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Content-Type': 'application/json'\n}\n\nr = requests.post('/api/v1/gateway/services/encrypt', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/api/v1/gateway/services/encrypt', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/encrypt");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("POST");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Content-Type": []string{"application/json"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("POST", "/api/v1/gateway/services/encrypt", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"POST /api/v1/gateway/services/encrypt")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Encrypt a Secret using the Secret Store, ECDSA or RSA methods")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Body parameter")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "did": "did:nv:08a429b8529856d59867503f8056903a680935a76950bb9649785cc97869a43d",\n  "message": "{\\"url\\":\\"https://keyko.io/\\",\\"index\\":0,\\"checksum\\":\\"efb21\\",\\"contentLength\\":\\"45\\",\\"contentType\\":\\"text/csv\\"}",\n  "method": "PSK-RSA"\n}\n')),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_encrypt-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Asset urls encryption.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb did"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Identifier of the asset.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb message"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The message to encrypt")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb method"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The encryption method to use. Options (",(0,l.kt)("inlineCode",{parentName:"td"},"SecretStore"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"PSK-ECDSA"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"PSK-RSA"),")")))),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_encrypt-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"document successfully encrypted."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"post__api_v1_gateway_services_exec"},"post__api_v1_gateway_services_exec"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X POST /api/v1/gateway/services/exec?consumerAddress=string&serviceAgreementId=string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"POST /api/v1/gateway/services/exec?consumerAddress=string&serviceAgreementId=string HTTP/1.1\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nfetch('/api/v1/gateway/services/exec?consumerAddress=string&serviceAgreementId=string',\n{\n  method: 'POST'\n\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nresult = RestClient.post '/api/v1/gateway/services/exec',\n  params: {\n  'consumerAddress' => 'string',\n'serviceAgreementId' => 'string'\n}\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\n\nr = requests.post('/api/v1/gateway/services/exec', params={\n  'consumerAddress': 'string',  'serviceAgreementId': 'string'\n})\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/api/v1/gateway/services/exec', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/exec?consumerAddress=string&serviceAgreementId=string");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("POST");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("POST", "/api/v1/gateway/services/exec", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"POST /api/v1/gateway/services/exec")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Call the execution of a workflow.")),(0,l.kt)("p",null,"Method deprecated, it will be replaced by ",(0,l.kt)("inlineCode",{parentName:"p"},"/execute")," in further versions"),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_exec-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"consumerAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The consumer address.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"serviceAgreementId"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"signature"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Signature of the documentId to verify that the consumer has rights to download the asset.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"workflowDID"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"DID of the workflow that is going to start to be executed.")))),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_exec-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Call to the nevermined-compute-api was successful."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"400"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.5.1"},"Bad Request")),(0,l.kt)("td",{parentName:"tr",align:null},"One of the required attributes is missing."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid asset data."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"post_api_v1_gateway_services_executeagreement_id"},"post_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_execute"),"{agreement_id}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X POST /api/v1/gateway/services/execute/{agreement_id} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"POST /api/v1/gateway/services/execute/{agreement_id} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/execute/{agreement_id}',\n{\n  method: 'POST',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.post '/api/v1/gateway/services/execute/{agreement_id}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.post('/api/v1/gateway/services/execute/{agreement_id}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/api/v1/gateway/services/execute/{agreement_id}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/execute/{agreement_id}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("POST");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("POST", "/api/v1/gateway/services/execute/{agreement_id}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"POST /api/v1/gateway/services/execute/{agreement_id}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Call the execution of a workflow.")),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_execute_{agreement_id}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"agreement_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_execute_{agreement_id}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Call to the compute-api was successful."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"get_api_v1_gateway_services_nft-access-proofagreement_id"},"get_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_nft-access-proof"),"{agreement_id}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/nft-access-proof/{agreement_id} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/nft-access-proof/{agreement_id} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/nft-access-proof/{agreement_id}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/nft-access-proof/{agreement_id}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.get('/api/v1/gateway/services/nft-access-proof/{agreement_id}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/nft-access-proof/{agreement_id}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/nft-access-proof/{agreement_id}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/nft-access-proof/{agreement_id}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/nft-access-proof/{agreement_id}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows to get access to an asset data file holding a NFT.")),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_nft-access-proof_{agreement_id}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"agreement_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Index of the file in the array of files.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_nft-access-proof_{agreement_id}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the file binary"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"get_api_v1_gateway_services_nft-access-proofagreementidindex"},"get_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_nft-access-proof"),"{agreement",(0,l.kt)("em",{parentName:"h2"},"id}"),"{index}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/nft-access-proof/{agreement_id}/{index} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/nft-access-proof/{agreement_id}/{index} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/nft-access-proof/{agreement_id}/{index}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/nft-access-proof/{agreement_id}/{index}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.get('/api/v1/gateway/services/nft-access-proof/{agreement_id}/{index}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/nft-access-proof/{agreement_id}/{index}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/nft-access-proof/{agreement_id}/{index}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/nft-access-proof/{agreement_id}/{index}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/nft-access-proof/{agreement_id}/{index}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows to get access to an asset data file holding a NFT.")),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_nft-access-proof_{agreement_id}_{index}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"agreement_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Index of the file in the array of files.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_nft-access-proof_{agreement_id}_{index}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the file binary"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"get_api_v1_gateway_services_nft-accessagreement_id"},"get_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_nft-access"),"{agreement_id}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/nft-access/{agreement_id} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/nft-access/{agreement_id} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/nft-access/{agreement_id}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/nft-access/{agreement_id}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.get('/api/v1/gateway/services/nft-access/{agreement_id}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/nft-access/{agreement_id}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/nft-access/{agreement_id}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/nft-access/{agreement_id}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/nft-access/{agreement_id}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows to get access to an asset data file holding a NFT.")),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_nft-access_{agreement_id}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"agreement_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Index of the file in the array of files.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_nft-access_{agreement_id}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the file binary"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"get_api_v1_gateway_services_nft-accessagreementidindex"},"get_",(0,l.kt)("em",{parentName:"h2"},"api_v1_gateway_services_nft-access"),"{agreement",(0,l.kt)("em",{parentName:"h2"},"id}"),"{index}"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/nft-access/{agreement_id}/{index} \\\n  -H 'Authorization: string'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/nft-access/{agreement_id}/{index} HTTP/1.1\n\nAuthorization: string\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Authorization':'string'\n};\n\nfetch('/api/v1/gateway/services/nft-access/{agreement_id}/{index}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Authorization' => 'string'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/nft-access/{agreement_id}/{index}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Authorization': 'string'\n}\n\nr = requests.get('/api/v1/gateway/services/nft-access/{agreement_id}/{index}', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Authorization' => 'string',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/nft-access/{agreement_id}/{index}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/nft-access/{agreement_id}/{index}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Authorization": []string{"string"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/nft-access/{agreement_id}/{index}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/nft-access/{agreement_id}/{index}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Allows to get access to an asset data file holding a NFT.")),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_nft-access_{agreement_id}_{index}-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"agreement_id"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Index of the file in the array of files.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The bearer token.")))),(0,l.kt)("h3",{id:"get__api_v1_gateway_services_nft-access_{agreement_id}_{index}-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the file binary"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"401"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,l.kt)("td",{parentName:"tr",align:null},"Invalid bearer token."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"post__api_v1_gateway_services_nft-transfer"},"post__api_v1_gateway_services_nft-transfer"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X POST /api/v1/gateway/services/nft-transfer \\\n  -H 'Content-Type: application/json'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"POST /api/v1/gateway/services/nft-transfer HTTP/1.1\n\nContent-Type: application/json\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const inputBody = \'{\n  "agreementId": "0x659a580e03df7896b35b2cde4668d26801a6eb09bb5604483e588a719d1d747a",\n  "nftAmount": 1,\n  "nftHolder": "0xA99D43d86A0758d5632313b8fA3972B6088A21BB",\n  "nftReceiver": "0x068Ed00cF0441e4829D9784fCBe7b9e26D4BD8d0"\n}\';\nconst headers = {\n  \'Content-Type\':\'application/json\'\n};\n\nfetch(\'/api/v1/gateway/services/nft-transfer\',\n{\n  method: \'POST\',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json'\n}\n\nresult = RestClient.post '/api/v1/gateway/services/nft-transfer',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Content-Type': 'application/json'\n}\n\nr = requests.post('/api/v1/gateway/services/nft-transfer', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/api/v1/gateway/services/nft-transfer', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/nft-transfer");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("POST");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Content-Type": []string{"application/json"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("POST", "/api/v1/gateway/services/nft-transfer", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"POST /api/v1/gateway/services/nft-transfer")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Asks to perform the transfer of an NFT on behalf of an nft holder.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Body parameter")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "agreementId": "0x659a580e03df7896b35b2cde4668d26801a6eb09bb5604483e588a719d1d747a",\n  "nftAmount": 1,\n  "nftHolder": "0xA99D43d86A0758d5632313b8fA3972B6088A21BB",\n  "nftReceiver": "0x068Ed00cF0441e4829D9784fCBe7b9e26D4BD8d0"\n}\n')),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_nft-transfer-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The request object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb agreementId"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the NFT Sales service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb nftAmount"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"integer"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of NFTs to transfer.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb nftHolder"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The address of the current NFT holder.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb nftReceiver"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The address of the intended NFT receiver.")))),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_nft-transfer-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"The gateway successfuly transfered the NFT"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"400"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.5.1"},"Bad Request")),(0,l.kt)("td",{parentName:"tr",align:null},"The asset associated with the agreementId does not contain an NFT Sales service."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"402"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.5.2"},"Payment Required")),(0,l.kt)("td",{parentName:"tr",align:null},"The nftReceiver has not locked the payment."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"405"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.5.5"},"Method Not Allowed")),(0,l.kt)("td",{parentName:"tr",align:null},"The nftHolder has not approved the gateway to perform the NFT transfer."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"406"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.5.6"},"Not Acceptable")),(0,l.kt)("td",{parentName:"tr",align:null},"The nftHolder does not have enough nfts to transfer."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"post__api_v1_gateway_services_nft-transfer-with-access"},"post__api_v1_gateway_services_nft-transfer-with-access"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X POST /api/v1/gateway/services/nft-transfer-with-access \\\n  -H 'Content-Type: application/json'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"POST /api/v1/gateway/services/nft-transfer-with-access HTTP/1.1\n\nContent-Type: application/json\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const inputBody = \'{\n  "agreementId": "0x659a580e03df7896b35b2cde4668d26801a6eb09bb5604483e588a719d1d747a",\n  "nftAmount": 1,\n  "nftHolder": "0xA99D43d86A0758d5632313b8fA3972B6088A21BB",\n  "nftReceiver": "0x068Ed00cF0441e4829D9784fCBe7b9e26D4BD8d0"\n}\';\nconst headers = {\n  \'Content-Type\':\'application/json\'\n};\n\nfetch(\'/api/v1/gateway/services/nft-transfer-with-access\',\n{\n  method: \'POST\',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json'\n}\n\nresult = RestClient.post '/api/v1/gateway/services/nft-transfer-with-access',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Content-Type': 'application/json'\n}\n\nr = requests.post('/api/v1/gateway/services/nft-transfer-with-access', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/api/v1/gateway/services/nft-transfer-with-access', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/nft-transfer-with-access");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("POST");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Content-Type": []string{"application/json"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("POST", "/api/v1/gateway/services/nft-transfer-with-access", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"POST /api/v1/gateway/services/nft-transfer-with-access")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Asks to perform the transfer of an NFT on behalf of an nft holder.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Body parameter")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "agreementId": "0x659a580e03df7896b35b2cde4668d26801a6eb09bb5604483e588a719d1d747a",\n  "nftAmount": 1,\n  "nftHolder": "0xA99D43d86A0758d5632313b8fA3972B6088A21BB",\n  "nftReceiver": "0x068Ed00cF0441e4829D9784fCBe7b9e26D4BD8d0"\n}\n')),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_nft-transfer-with-access-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The request object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb agreementId"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the NFT Sales service agreement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb nftAmount"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"integer"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of NFTs to transfer.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb nftHolder"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The address of the current NFT holder.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb nftReceiver"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The address of the intended NFT receiver.")))),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_nft-transfer-with-access-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"200"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("td",{parentName:"tr",align:null},"The gateway successfuly transfered the NFT"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"400"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.5.1"},"Bad Request")),(0,l.kt)("td",{parentName:"tr",align:null},"The asset associated with the agreementId does not contain an NFT Sales service."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"402"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.5.2"},"Payment Required")),(0,l.kt)("td",{parentName:"tr",align:null},"The nftReceiver has not locked the payment."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"405"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.5.5"},"Method Not Allowed")),(0,l.kt)("td",{parentName:"tr",align:null},"The nftHolder has not approved the gateway to perform the NFT transfer."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"406"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.5.6"},"Not Acceptable")),(0,l.kt)("td",{parentName:"tr",align:null},"The nftHolder does not have enough nfts to transfer."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,l.kt)("h2",{id:"post__api_v1_gateway_services_publish"},"post__api_v1_gateway_services_publish"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Code samples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X POST /api/v1/gateway/services/publish \\\n  -H 'Content-Type: application/json'\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"POST /api/v1/gateway/services/publish HTTP/1.1\n\nContent-Type: application/json\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const inputBody = \'{\n  "document": "/some-url",\n  "documentId": "did:nv:08a429b8529856d59867503f8056903a680935a76950bb9649785cc97869a43d",\n  "publisherAddress": "0x00a329c0648769A73afAc7F9381E08FB43dBEA72",\n  "signature": ""\n}\';\nconst headers = {\n  \'Content-Type\':\'application/json\'\n};\n\nfetch(\'/api/v1/gateway/services/publish\',\n{\n  method: \'POST\',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json'\n}\n\nresult = RestClient.post '/api/v1/gateway/services/publish',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Content-Type': 'application/json'\n}\n\nr = requests.post('/api/v1/gateway/services/publish', headers = headers)\n\nprint(r.json())\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/api/v1/gateway/services/publish', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/publish");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("POST");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Content-Type": []string{"application/json"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("POST", "/api/v1/gateway/services/publish", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"POST /api/v1/gateway/services/publish")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Encrypt document using the SecretStore and keyed by the given documentId.")),(0,l.kt)("br",null),"This can be used by the publisher of an asset to encrypt the urls of the",(0,l.kt)("br",null),"asset data files before publishing the asset ddo. The publisher to use this",(0,l.kt)("br",null),"service is one that is using a front-end with a wallet app such as MetaMask.",(0,l.kt)("br",null),"In such scenario the publisher is not able to encrypt the urls using the",(0,l.kt)("br",null),"SecretStore interface and this service becomes necessary.",(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Body parameter")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "document": "/some-url",\n  "documentId": "did:nv:08a429b8529856d59867503f8056903a680935a76950bb9649785cc97869a43d",\n  "publisherAddress": "0x00a329c0648769A73afAc7F9381E08FB43dBEA72",\n  "signature": ""\n}\n')),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_publish-parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"In"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Asset urls encryption.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb document"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"document")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb documentId"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Identifier of the asset to be registered in ocean.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb publisherAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Publisher address.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\xbb signature"),(0,l.kt)("td",{parentName:"tr",align:null},"body"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Publisher signature of the documentId")))),(0,l.kt)("h3",{id:"post__api_v1_gateway_services_publish-responses"},"Responses"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"201"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.2"},"Created")),(0,l.kt)("td",{parentName:"tr",align:null},"document successfully encrypted."),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"None")))),(0,l.kt)("aside",{class:"success"},"This operation does not require authentication"))}m.isMDXComponent=!0}}]);