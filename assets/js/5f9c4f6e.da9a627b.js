"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9394],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),i=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=i(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=i(n),m=r,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(k,o(o({ref:t},c),{},{components:n})):a.createElement(k,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var i=2;i<l;i++)o[i]=n[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},19312:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>i});var a=n(87462),r=(n(67294),n(3905));const l={sidebar_position:1,description:"Nevermined Gateway"},o="Description",s={unversionedId:"architecture/gateway/description",id:"architecture/gateway/description",title:"Description",description:"Nevermined Gateway",source:"@site/docs/architecture/gateway/description.md",sourceDirName:"architecture/gateway",slug:"/architecture/gateway/description",permalink:"/docs/architecture/gateway/description",draft:!1,editUrl:"https://github.com/nevermined-io/docs/tree/main/docs/architecture/gateway/description.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Nevermined Gateway"},sidebar:"tutorialSidebar",previous:{title:"Nevermined Gateway",permalink:"/docs/architecture/gateway/"},next:{title:"GATEWAY v1.0.0",permalink:"/docs/architecture/gateway/openapi"}},p={},i=[{value:"InfoController_getInfo",id:"infocontroller_getinfo",level:2},{value:"EncryptController_doEncrypt",id:"encryptcontroller_doencrypt",level:2},{value:"AccessController_doAccess",id:"accesscontroller_doaccess",level:2},{value:"AccessController_doAccessProof",id:"accesscontroller_doaccessproof",level:2},{value:"AccessController_doNftAccess",id:"accesscontroller_donftaccess",level:2},{value:"AccessController_doNftTransfer",id:"accesscontroller_donfttransfer",level:2},{value:"AccessController_doDownload",id:"accesscontroller_dodownload",level:2},{value:"AccessController_doUpload",id:"accesscontroller_doupload",level:2},{value:"AuthController_token",id:"authcontroller_token",level:2},{value:"Properties",id:"properties",level:3},{value:"Properties",id:"properties-1",level:3},{value:"Properties",id:"properties-2",level:3},{value:"Properties",id:"properties-3",level:3},{value:"Properties",id:"properties-4",level:3},{value:"Properties",id:"properties-5",level:3},{value:"Properties",id:"properties-6",level:3},{value:"Properties",id:"properties-7",level:3}],c={toc:i};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"description"},"Description"),(0,r.kt)("p",null,"In the Nevermined ecosystem, the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/gateway-ts/"},"Gateway")," is\nthe technical component executed by the Publishers allowing them to provide extended data\nservices (e.g. storage and compute)."),(0,r.kt)("p",null,"Nevermined Gateway, as part of the Publisher ecosystem, includes the credentials to interact\nwith the infrastructure (initially cloud, but could be on-premise)."),(0,r.kt)("h1",{id:"nevermined-gateway"},"Nevermined Gateway v0.1.5"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.")),(0,r.kt)("p",null,"Base URLs:"),(0,r.kt)("h1",{id:"authentication"},"Authentication"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HTTP Authentication, scheme: bearer ")),(0,r.kt)("h1",{id:"nevermined-gateway-info"},"Info"),(0,r.kt)("h2",{id:"infocontroller_getinfo"},"InfoController_getInfo"),(0,r.kt)("a",{id:"opIdInfoController_getInfo"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Code samples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET / \\\n  -H 'Accept: application/json'\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"GET / HTTP/1.1\n\nAccept: application/json\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Accept':'application/json'\n};\n\nfetch('/',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.get '/',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Accept': 'application/json'\n}\n\nr = requests.get('/', headers = headers)\n\nprint(r.json())\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Accept": []string{"application/json"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GET /")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Public")),(0,r.kt)("p",null,"Get API info"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Example responses")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"200 Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "APIversion": "1.0.4",\n  "docs": "http://localhost:3100/api/v1/docs"\n}\n')),(0,r.kt)("h3",{id:"infocontroller_getinfo-responses"},"Responses"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,r.kt)("td",{parentName:"tr",align:null},"Return API Info"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#schemagetinfodto"},"GetInfoDto"))))),(0,r.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,r.kt)("h1",{id:"nevermined-gateway-encrypt"},"Encrypt"),(0,r.kt)("h2",{id:"encryptcontroller_doencrypt"},"EncryptController_doEncrypt"),(0,r.kt)("a",{id:"opIdEncryptController_doEncrypt"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Code samples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X POST /api/v1/gateway/services/encrypt \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"POST /api/v1/gateway/services/encrypt HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const inputBody = '{\n  \"method\": \"PSK-ECDSA\",\n  \"message\": \"Hello!\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/api/v1/gateway/services/encrypt',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/api/v1/gateway/services/encrypt',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/api/v1/gateway/services/encrypt', headers = headers)\n\nprint(r.json())\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/api/v1/gateway/services/encrypt', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/encrypt");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("POST");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Content-Type": []string{"application/json"},\n        "Accept": []string{"application/json"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("POST", "/api/v1/gateway/services/encrypt", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"POST /api/v1/gateway/services/encrypt")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Public")),(0,r.kt)("p",null,"Encrypt"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Body parameter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "method": "PSK-ECDSA",\n  "message": "Hello!"\n}\n')),(0,r.kt)("h3",{id:"encryptcontroller_doencrypt-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"In"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"body"),(0,r.kt)("td",{parentName:"tr",align:null},"body"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#schemaencryptdto"},"EncryptDto")),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Example responses")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"200 Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"{}\n")),(0,r.kt)("h3",{id:"encryptcontroller_doencrypt-responses"},"Responses"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,r.kt)("td",{parentName:"tr",align:null},"Return encrypted stuff"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#schemaencryptresult"},"EncryptResult"))))),(0,r.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,r.kt)("h1",{id:"nevermined-gateway-access"},"Access"),(0,r.kt)("h2",{id:"accesscontroller_doaccess"},"AccessController_doAccess"),(0,r.kt)("a",{id:"opIdAccessController_doAccess"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Code samples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/access/{agreement_id}/{index} \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {access-token}'\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/access/{agreement_id}/{index} HTTP/1.1\n\nAccept: application/json\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Accept':'application/json',\n  'Authorization':'Bearer {access-token}'\n};\n\nfetch('/api/v1/gateway/services/access/{agreement_id}/{index}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'Authorization' => 'Bearer {access-token}'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/access/{agreement_id}/{index}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Accept': 'application/json',\n  'Authorization': 'Bearer {access-token}'\n}\n\nr = requests.get('/api/v1/gateway/services/access/{agreement_id}/{index}', headers = headers)\n\nprint(r.json())\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'Authorization' => 'Bearer {access-token}',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/access/{agreement_id}/{index}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/access/{agreement_id}/{index}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Accept": []string{"application/json"},\n        "Authorization": []string{"Bearer {access-token}"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/access/{agreement_id}/{index}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/access/{agreement_id}/{index}")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Public")),(0,r.kt)("p",null,"Access asset"),(0,r.kt)("h3",{id:"accesscontroller_doaccess-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"In"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"index"),(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Example responses")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"200 Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"{}\n")),(0,r.kt)("h3",{id:"accesscontroller_doaccess-responses"},"Responses"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,r.kt)("td",{parentName:"tr",align:null},"Return the url of asset"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#schemastreamablefile"},"StreamableFile"))))),(0,r.kt)("aside",{class:"warning"},"To perform this operation, you must be authenticated by means of one of the following methods: Authorization"),(0,r.kt)("h2",{id:"accesscontroller_doaccessproof"},"AccessController_doAccessProof"),(0,r.kt)("a",{id:"opIdAccessController_doAccessProof"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Code samples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/access-proof/{agreement_id}/{index} \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {access-token}'\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/access-proof/{agreement_id}/{index} HTTP/1.1\n\nAccept: application/json\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Accept':'application/json',\n  'Authorization':'Bearer {access-token}'\n};\n\nfetch('/api/v1/gateway/services/access-proof/{agreement_id}/{index}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'Authorization' => 'Bearer {access-token}'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/access-proof/{agreement_id}/{index}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Accept': 'application/json',\n  'Authorization': 'Bearer {access-token}'\n}\n\nr = requests.get('/api/v1/gateway/services/access-proof/{agreement_id}/{index}', headers = headers)\n\nprint(r.json())\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'Authorization' => 'Bearer {access-token}',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/access-proof/{agreement_id}/{index}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/access-proof/{agreement_id}/{index}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Accept": []string{"application/json"},\n        "Authorization": []string{"Bearer {access-token}"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/access-proof/{agreement_id}/{index}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/access-proof/{agreement_id}/{index}")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Public")),(0,r.kt)("p",null,"Access asset w/ DTP proof"),(0,r.kt)("h3",{id:"accesscontroller_doaccessproof-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"In"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"index"),(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Example responses")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"200 Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"string"\n')),(0,r.kt)("h3",{id:"accesscontroller_doaccessproof-responses"},"Responses"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,r.kt)("td",{parentName:"tr",align:null},"Return the url of asset"),(0,r.kt)("td",{parentName:"tr",align:null},"string")))),(0,r.kt)("aside",{class:"warning"},"To perform this operation, you must be authenticated by means of one of the following methods: Authorization"),(0,r.kt)("h2",{id:"accesscontroller_donftaccess"},"AccessController_doNftAccess"),(0,r.kt)("a",{id:"opIdAccessController_doNftAccess"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Code samples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/nft-access/{agreement_id}/{index} \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {access-token}'\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/nft-access/{agreement_id}/{index} HTTP/1.1\n\nAccept: application/json\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Accept':'application/json',\n  'Authorization':'Bearer {access-token}'\n};\n\nfetch('/api/v1/gateway/services/nft-access/{agreement_id}/{index}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'Authorization' => 'Bearer {access-token}'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/nft-access/{agreement_id}/{index}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Accept': 'application/json',\n  'Authorization': 'Bearer {access-token}'\n}\n\nr = requests.get('/api/v1/gateway/services/nft-access/{agreement_id}/{index}', headers = headers)\n\nprint(r.json())\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'Authorization' => 'Bearer {access-token}',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/nft-access/{agreement_id}/{index}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/nft-access/{agreement_id}/{index}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Accept": []string{"application/json"},\n        "Authorization": []string{"Bearer {access-token}"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/nft-access/{agreement_id}/{index}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/nft-access/{agreement_id}/{index}")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Public")),(0,r.kt)("p",null,"Access asset"),(0,r.kt)("h3",{id:"accesscontroller_donftaccess-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"In"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"index"),(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Example responses")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"200 Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"{}\n")),(0,r.kt)("h3",{id:"accesscontroller_donftaccess-responses"},"Responses"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,r.kt)("td",{parentName:"tr",align:null},"Return the url of asset"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#schemastreamablefile"},"StreamableFile"))))),(0,r.kt)("aside",{class:"warning"},"To perform this operation, you must be authenticated by means of one of the following methods: Authorization"),(0,r.kt)("h2",{id:"accesscontroller_donfttransfer"},"AccessController_doNftTransfer"),(0,r.kt)("a",{id:"opIdAccessController_doNftTransfer"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Code samples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X POST /api/v1/gateway/services/nft-transfer \\\n  -H 'Content-Type: application/json'\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"POST /api/v1/gateway/services/nft-transfer HTTP/1.1\n\nContent-Type: application/json\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const inputBody = \'{\n  "agreementId": "0x...",\n  "nftHolder": "0x...",\n  "nftReceiver": "0x...",\n  "nftAmount": "1",\n  "nftType": "721"\n}\';\nconst headers = {\n  \'Content-Type\':\'application/json\'\n};\n\nfetch(\'/api/v1/gateway/services/nft-transfer\',\n{\n  method: \'POST\',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json'\n}\n\nresult = RestClient.post '/api/v1/gateway/services/nft-transfer',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Content-Type': 'application/json'\n}\n\nr = requests.post('/api/v1/gateway/services/nft-transfer', headers = headers)\n\nprint(r.json())\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/api/v1/gateway/services/nft-transfer', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/nft-transfer");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("POST");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Content-Type": []string{"application/json"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("POST", "/api/v1/gateway/services/nft-transfer", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"POST /api/v1/gateway/services/nft-transfer")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Public")),(0,r.kt)("p",null,"Access asset"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Body parameter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "agreementId": "0x...",\n  "nftHolder": "0x...",\n  "nftReceiver": "0x...",\n  "nftAmount": "1",\n  "nftType": "721"\n}\n')),(0,r.kt)("h3",{id:"accesscontroller_donfttransfer-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"In"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"body"),(0,r.kt)("td",{parentName:"tr",align:null},"body"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#schematransferdto"},"TransferDto")),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none")))),(0,r.kt)("h3",{id:"accesscontroller_donfttransfer-responses"},"Responses"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,r.kt)("td",{parentName:"tr",align:null},'Return "success" if transfer worked'),(0,r.kt)("td",{parentName:"tr",align:null},"None")))),(0,r.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,r.kt)("h2",{id:"accesscontroller_dodownload"},"AccessController_doDownload"),(0,r.kt)("a",{id:"opIdAccessController_doDownload"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Code samples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X GET /api/v1/gateway/services/download/{index} \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {access-token}'\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/v1/gateway/services/download/{index} HTTP/1.1\n\nAccept: application/json\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Accept':'application/json',\n  'Authorization':'Bearer {access-token}'\n};\n\nfetch('/api/v1/gateway/services/download/{index}',\n{\n  method: 'GET',\n\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Accept' => 'application/json',\n  'Authorization' => 'Bearer {access-token}'\n}\n\nresult = RestClient.get '/api/v1/gateway/services/download/{index}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Accept': 'application/json',\n  'Authorization': 'Bearer {access-token}'\n}\n\nr = requests.get('/api/v1/gateway/services/download/{index}', headers = headers)\n\nprint(r.json())\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Accept' => 'application/json',\n    'Authorization' => 'Bearer {access-token}',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('GET','/api/v1/gateway/services/download/{index}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/download/{index}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("GET");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Accept": []string{"application/json"},\n        "Authorization": []string{"Bearer {access-token}"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("GET", "/api/v1/gateway/services/download/{index}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GET /api/v1/gateway/services/download/{index}")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Public")),(0,r.kt)("p",null,"Download asset"),(0,r.kt)("h3",{id:"accesscontroller_dodownload-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"In"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"index"),(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Example responses")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"200 Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"{}\n")),(0,r.kt)("h3",{id:"accesscontroller_dodownload-responses"},"Responses"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,r.kt)("td",{parentName:"tr",align:null},"Return the asset"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#schemastreamablefile"},"StreamableFile"))))),(0,r.kt)("aside",{class:"warning"},"To perform this operation, you must be authenticated by means of one of the following methods: Authorization"),(0,r.kt)("h2",{id:"accesscontroller_doupload"},"AccessController_doUpload"),(0,r.kt)("a",{id:"opIdAccessController_doUpload"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Code samples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X POST /api/v1/gateway/services/upload/{backend} \\\n  -H 'Content-Type: application/json'\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"POST /api/v1/gateway/services/upload/{backend} HTTP/1.1\n\nContent-Type: application/json\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const inputBody = '{\n  \"encrypt\": \"false\"\n}';\nconst headers = {\n  'Content-Type':'application/json'\n};\n\nfetch('/api/v1/gateway/services/upload/{backend}',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json'\n}\n\nresult = RestClient.post '/api/v1/gateway/services/upload/{backend}',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Content-Type': 'application/json'\n}\n\nr = requests.post('/api/v1/gateway/services/upload/{backend}', headers = headers)\n\nprint(r.json())\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/api/v1/gateway/services/upload/{backend}', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/upload/{backend}");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("POST");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Content-Type": []string{"application/json"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("POST", "/api/v1/gateway/services/upload/{backend}", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"POST /api/v1/gateway/services/upload/{backend}")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Public")),(0,r.kt)("p",null,"Access asset"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Body parameter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "encrypt": "false"\n}\n')),(0,r.kt)("h3",{id:"accesscontroller_doupload-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"In"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backend"),(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"body"),(0,r.kt)("td",{parentName:"tr",align:null},"body"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#schemauploaddto"},"UploadDto")),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none")))),(0,r.kt)("h3",{id:"accesscontroller_doupload-responses"},"Responses"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,r.kt)("td",{parentName:"tr",align:null},"Return the url of asset"),(0,r.kt)("td",{parentName:"tr",align:null},"None")))),(0,r.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,r.kt)("h1",{id:"nevermined-gateway-auth"},"Auth"),(0,r.kt)("h2",{id:"authcontroller_token"},"AuthController_token"),(0,r.kt)("a",{id:"opIdAuthController_token"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Code samples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X POST /api/v1/gateway/services/oauth/token \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"POST /api/v1/gateway/services/oauth/token HTTP/1.1\n\nContent-Type: application/json\nAccept: application/json\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const inputBody = '{\n  \"grant_type\": \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n  \"assertion\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]\"\n}';\nconst headers = {\n  'Content-Type':'application/json',\n  'Accept':'application/json'\n};\n\nfetch('/api/v1/gateway/services/oauth/token',\n{\n  method: 'POST',\n  body: inputBody,\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rest-client'\nrequire 'json'\n\nheaders = {\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json'\n}\n\nresult = RestClient.post '/api/v1/gateway/services/oauth/token',\n  params: {\n  }, headers: headers\n\np JSON.parse(result)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nr = requests.post('/api/v1/gateway/services/oauth/token', headers = headers)\n\nprint(r.json())\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire 'vendor/autoload.php';\n\n$headers = array(\n    'Content-Type' => 'application/json',\n    'Accept' => 'application/json',\n);\n\n$client = new \\GuzzleHttp\\Client();\n\n// Define array of request body.\n$request_body = array();\n\ntry {\n    $response = $client->request('POST','/api/v1/gateway/services/oauth/token', array(\n        'headers' => $headers,\n        'json' => $request_body,\n       )\n    );\n    print_r($response->getBody()->getContents());\n }\n catch (\\GuzzleHttp\\Exception\\BadResponseException $e) {\n    // handle exception or api errors.\n    print_r($e->getMessage());\n }\n\n // ...\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'URL obj = new URL("/api/v1/gateway/services/oauth/token");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod("POST");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\n    new InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\n    response.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n       "bytes"\n       "net/http"\n)\n\nfunc main() {\n\n    headers := map[string][]string{\n        "Content-Type": []string{"application/json"},\n        "Accept": []string{"application/json"},\n    }\n\n    data := bytes.NewBuffer([]byte{jsonReq})\n    req, err := http.NewRequest("POST", "/api/v1/gateway/services/oauth/token", data)\n    req.Header = headers\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    // ...\n}\n\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"POST /api/v1/gateway/services/oauth/token")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Public")),(0,r.kt)("p",null,"Login using a JWT claim for client authentication"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Body parameter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "grant_type": "urn:ietf:params:oauth:grant-type:jwt-bearer",\n  "assertion": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]"\n}\n')),(0,r.kt)("h3",{id:"authcontroller_token-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"In"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"body"),(0,r.kt)("td",{parentName:"tr",align:null},"body"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#schemaclientassertiondto"},"ClientAssertionDto")),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Example responses")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"201 Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "access_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]"\n}\n')),(0,r.kt)("h3",{id:"authcontroller_token-responses"},"Responses"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"201"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.2"},"Created")),(0,r.kt)("td",{parentName:"tr",align:null},"The access_token"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#schemalogindto"},"LoginDto"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"401"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7235#section-3.1"},"Unauthorized")),(0,r.kt)("td",{parentName:"tr",align:null},"Unauthorized access"),(0,r.kt)("td",{parentName:"tr",align:null},"None")))),(0,r.kt)("aside",{class:"success"},"This operation does not require authentication"),(0,r.kt)("h1",{id:"schemas"},"Schemas"),(0,r.kt)("h2",{id:"tocS_GetInfoDto"},"GetInfoDto"),(0,r.kt)("a",{id:"schemagetinfodto"}),(0,r.kt)("a",{id:"schema_GetInfoDto"}),(0,r.kt)("a",{id:"tocSgetinfodto"}),(0,r.kt)("a",{id:"tocsgetinfodto"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "APIversion": "1.0.4",\n  "docs": "http://localhost:3100/api/v1/docs"\n}\n\n')),(0,r.kt)("h3",{id:"properties"},"Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Restrictions"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"APIversion"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"Marketplace API Version")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"docs"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"API docs url")))),(0,r.kt)("h2",{id:"tocS_EncryptDto"},"EncryptDto"),(0,r.kt)("a",{id:"schemaencryptdto"}),(0,r.kt)("a",{id:"schema_EncryptDto"}),(0,r.kt)("a",{id:"tocSencryptdto"}),(0,r.kt)("a",{id:"tocsencryptdto"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "method": "PSK-ECDSA",\n  "message": "Hello!"\n}\n\n')),(0,r.kt)("h3",{id:"properties-1"},"Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Restrictions"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"method"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"Encryption method")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"message"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"Encrypted message")))),(0,r.kt)("h2",{id:"tocS_EncryptResult"},"EncryptResult"),(0,r.kt)("a",{id:"schemaencryptresult"}),(0,r.kt)("a",{id:"schema_EncryptResult"}),(0,r.kt)("a",{id:"tocSencryptresult"}),(0,r.kt)("a",{id:"tocsencryptresult"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"{}\n\n")),(0,r.kt)("h3",{id:"properties-2"},"Properties"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"None")),(0,r.kt)("h2",{id:"tocS_StreamableFile"},"StreamableFile"),(0,r.kt)("a",{id:"schemastreamablefile"}),(0,r.kt)("a",{id:"schema_StreamableFile"}),(0,r.kt)("a",{id:"tocSstreamablefile"}),(0,r.kt)("a",{id:"tocsstreamablefile"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"{}\n\n")),(0,r.kt)("h3",{id:"properties-3"},"Properties"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"None")),(0,r.kt)("h2",{id:"tocS_TransferDto"},"TransferDto"),(0,r.kt)("a",{id:"schematransferdto"}),(0,r.kt)("a",{id:"schema_TransferDto"}),(0,r.kt)("a",{id:"tocStransferdto"}),(0,r.kt)("a",{id:"tocstransferdto"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "agreementId": "0x...",\n  "nftHolder": "0x...",\n  "nftReceiver": "0x...",\n  "nftAmount": "1",\n  "nftType": "721"\n}\n\n')),(0,r.kt)("h3",{id:"properties-4"},"Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Restrictions"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"agreementId"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"The agreement for NFT transfer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nftHolder"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"NFT holder address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nftReceiver"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"NFT receiver address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nftAmount"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of NFTs to transfer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nftType"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"Type of NFT")))),(0,r.kt)("h2",{id:"tocS_UploadDto"},"UploadDto"),(0,r.kt)("a",{id:"schemauploaddto"}),(0,r.kt)("a",{id:"schema_UploadDto"}),(0,r.kt)("a",{id:"tocSuploaddto"}),(0,r.kt)("a",{id:"tocsuploaddto"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "encrypt": "false"\n}\n\n')),(0,r.kt)("h3",{id:"properties-5"},"Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Restrictions"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"encrypt"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"Encrypt uploaded data")))),(0,r.kt)("h2",{id:"tocS_ClientAssertionDto"},"ClientAssertionDto"),(0,r.kt)("a",{id:"schemaclientassertiondto"}),(0,r.kt)("a",{id:"schema_ClientAssertionDto"}),(0,r.kt)("a",{id:"tocSclientassertiondto"}),(0,r.kt)("a",{id:"tocsclientassertiondto"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "grant_type": "urn:ietf:params:oauth:grant-type:jwt-bearer",\n  "assertion": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]"\n}\n\n')),(0,r.kt)("h3",{id:"properties-6"},"Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Restrictions"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"grant_type"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"Type type of JWT client assertion. Must be urn:ietf:params:oauth:grant-type:jwt-bearer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"assertion"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"A single JWT")))),(0,r.kt)("h2",{id:"tocS_LoginDto"},"LoginDto"),(0,r.kt)("a",{id:"schemalogindto"}),(0,r.kt)("a",{id:"schema_LoginDto"}),(0,r.kt)("a",{id:"tocSlogindto"}),(0,r.kt)("a",{id:"tocslogindto"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "access_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]"\n}\n\n')),(0,r.kt)("h3",{id:"properties-7"},"Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Restrictions"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"access_token"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"none"),(0,r.kt)("td",{parentName:"tr",align:null},"The Authorization Bearer token")))))}d.isMDXComponent=!0}}]);