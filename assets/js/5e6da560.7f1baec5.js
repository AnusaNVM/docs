"use strict";(self.webpackChunknvm_docs=self.webpackChunknvm_docs||[]).push([[2850],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=c(a),u=r,f=h["".concat(l,".").concat(u)]||h[u]||p[u]||i;return a?n.createElement(f,s(s({ref:t},d),{},{components:a})):n.createElement(f,s({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},7232:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:9,description:"Data transfer proofs"},s="Data transfer proofs",o={unversionedId:"architecture/specs/Spec-DTP",id:"architecture/specs/Spec-DTP",title:"Data transfer proofs",description:"Data transfer proofs",source:"@site/docs/architecture/specs/Spec-DTP.md",sourceDirName:"architecture/specs",slug:"/architecture/specs/Spec-DTP",permalink:"/docs/architecture/specs/Spec-DTP",draft:!1,editUrl:"https://github.com/nevermined-io/nvm-docs/tree/main/docs/architecture/specs/Spec-DTP.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,description:"Data transfer proofs"},sidebar:"tutorialSidebar",previous:{title:"Decentralized Data Provenance",permalink:"/docs/architecture/specs/Spec-PROVENANCE"},next:{title:"Marketplace API",permalink:"/docs/architecture/specs/Spec-MKT"}},l={},c=[{value:"Motivation",id:"motivation",level:2},{value:"Main ideas",id:"main-ideas",level:3},{value:"Actors and Technical Components",id:"actors-and-technical-components",level:2},{value:"Flows",id:"flows",level:2},{value:"Publishing Assets",id:"publishing-assets",level:3},{value:"Service agreement",id:"service-agreement",level:3},{value:"Accessing from gateway",id:"accessing-from-gateway",level:3}],d={toc:c};function p(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-transfer-proofs"},"Data transfer proofs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"shortname:      KEYTRANSFER\nname:           Data transfer proofs\ntype:           Standard\nstatus:         Valid\nversion:        0.1\neditor:         Sami M\xe4kel\xe4 <sami@nevermined.io>\ncontributors:   Aitor Argomaniz <aitor@nevermined.io>\n")),(0,r.kt)("p",null,"This SPEC describes an addition to ACCESS SPEC, namely new flows with improved guarantees about data transfer.\nThis enables using public storage for encrypted data."),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"Nevermined manages access control over digital assets. The protocol has been based in authenticate and authorize consumers to get access to components created and registered into an ecosystem by a publisher.\nWhen this access control needs to be implemented on top of storage solutions with some authorization mechanism (like Amazon S3 or similar) it's easier. The gateway protects that only authorized users can get access.\nBut when you want to use some storage without any access control capabilities (like a file available in a public HTTP url, or in IPFS or Filecoin), whoever with access to the URL can get access to the file going over any access control mechanism that Nevermined can provided."),(0,r.kt)("p",null,"In this kind of scenarios, they only way to protect this content is to encrypt it, and only allow to decrypt when the user fulfill some conditions. This SPEC is about the defition of the solution that allows to build robust and scalable access control on top of publicly available data."),(0,r.kt)("h3",{id:"main-ideas"},"Main ideas"),(0,r.kt)("p",null,"If the unencrypted asset is described by its hash, there are at least two use cases for being able to prove that the access to the asset with given hash is transferred:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A third party might have reviewed the data and can confirm its properties. Additionally it will show that each recipient gets the same data."),(0,r.kt)("li",{parentName:"ul"},"If compute attestation is available, for it to work both participants need access to data.")),(0,r.kt)("p",null,"To save resources, instead of showing that all the data is transferred, we assume that there is publicaly available encrypted data and only the symmetric key will be transferred (the hash of symmetric key is known by all participants). This does not impact the above use cases:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The third party can instead validate the combination of the key and encrypted data."),(0,r.kt)("li",{parentName:"ul"},"The compute attestation will use the encrypted data hash and the key instead of plain data hash as starting point. Note that with interactive proofs it would be enough for sender to send the decrypted key signed with their ECDSA or similar key. An advantage is that the keys can be used multiple times when using snarks.")),(0,r.kt)("h2",{id:"actors-and-technical-components"},"Actors and Technical Components"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"PUBLISHERS - Provide access to assets and/or services"),(0,r.kt)("li",{parentName:"ul"},"CONSUMERS - Want to get access to assets and/or services"),(0,r.kt)("li",{parentName:"ul"},"PROVIDER - When the publisher is not 100% 'online' can delegate some responsibilities to a provider for making data available on behalf of the publisher")),(0,r.kt)("h2",{id:"flows"},"Flows"),(0,r.kt)("h3",{id:"publishing-assets"},"Publishing Assets"),(0,r.kt)("p",null,"To set up the asset metadata:"),(0,r.kt)("p",null,"For the files, the first file represents the key and ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," attribute contains the plain text key (probably have to change).\nThese parts of metadata are encrypted so they won't show up publicly when querying the gateway."),(0,r.kt)("p",null,"The public parts that have to be added to ",(0,r.kt)("inlineCode",{parentName:"p"},"additionalInformation")," are"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"poseidonHash"),": Poseidon hash of the key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"providerKey.x")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"providerKey.y"),": The Babyjubjub public key of the provider.")),(0,r.kt)("p",null,"When the asset files are encrypted, the DDO will include under ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," the attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"encryption")," with the possible values of:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dtp")," - It means the file/s are encrypted via Data Tranfer Proofs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"none")," - The files are not encrypted. This is the default behavior if the parameter is not defined")),(0,r.kt)("h3",{id:"service-agreement"},"Service agreement"),(0,r.kt)("p",null,"For the service agreement, following data is needed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Address of provider and consumer."),(0,r.kt)("li",{parentName:"ul"},"Asset ID."),(0,r.kt)("li",{parentName:"ul"},"Poseidon hash of the data."),(0,r.kt)("li",{parentName:"ul"},"Babyjubjub keys of the provider and consumer."),(0,r.kt)("li",{parentName:"ul"},"Payment information.")),(0,r.kt)("p",null,"Before entering into the agreement, the consumer should already have downloaded the publicly available encrypted data."),(0,r.kt)("p",null,"Other parts of the flow are the same as normal access flow, but the final fulfilling of the transfer on-chain is different."),(0,r.kt)("p",null,"Provider first has to compute a shared secret using ECDH from his private key and consumers public key. This secret is used to encrypt the key using MiMC. The encrypted key is then sent onchain with the SNARK proof of correctness."),(0,r.kt)("p",null,"Similarly, consumer first has to compute a shared secret using ECDH from his private key and providers public key. The encrypted key is read from chain and then decrypted using MiMC. The hash of the result will be the same as was given beforehand."),(0,r.kt)("p",null,"Here is the complete flow including the different actors:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Data Transfer Proofs Deal Flow",src:a(8760).Z,width:"960",height:"540"})),(0,r.kt)("p",null,"In the case of an issue, here you can find the flow about how to manage the dispute resolution:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Data Transfer Proofs Deal Flow",src:a(9630).Z,width:"960",height:"540"})),(0,r.kt)("h3",{id:"accessing-from-gateway"},"Accessing from gateway"),(0,r.kt)("p",null,"In this scenario, the gateway acts as a PROVIDER. This is specially useful when the PUBLISHER doesn't want to be on-line running a service for responding to CONSUMER requests.\nIn these kind of scenarios, the PUBLISHER delegates to the PROVIDER running a gateway the capabilities of releases the decryption key to the CONSUMER when the conditions are fulfilled."),(0,r.kt)("p",null,"Accessing documents using the gateway mostly works the same way as normal flow, but the consumer has to send its Babyjubjub public key too. The data must be checked so that the gateway won't send invalid proofs to the net (it's possible to get the key from the calldata of the fulfill method if they have the corresponding key).\nAdditionally we can check that the eth address corresponds to the babyjub public key. This isn't absolutely necessary, but is needed if we want the gateway to return the data transfer key (or perhaps the data as plain text)."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Data Transfer Proofs Deal Flow",src:a(2197).Z,width:"960",height:"540"})))}p.isMDXComponent=!0},8760:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/data-transfer-proof-deal-flow-e4f10af09cd5ef0ec8ef84dea9a0ddbe.png"},9630:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/data-transfer-proof-dispute-resolution-438c46f17042e963584e811f0b61bcc2.png"},2197:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/data-transfer-proof-gateway-uploader-c2770e5abe786a9fdf5168c71bbe8737.png"}}]);