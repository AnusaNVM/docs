(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3328],{85162:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});var o=n(67294),a=n(86010);const l="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.default)(l,r),hidden:n},t)}},65488:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var o=n(87462),a=n(67294),l=n(86010),r=n(72389),i=n(67392),s=n(7094),d=n(12466);const c="tabList__CuJ",p="tabItem_LNqP";function u(e){var t;const{lazy:n,block:r,defaultValue:u,values:m,groupId:h,className:g}=e,v=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=m??v.map((e=>{let{props:{value:t,label:n,attributes:o}}=e;return{value:t,label:n,attributes:o}})),w=(0,i.l)(k,((e,t)=>e.value===t.value));if(w.length>0)throw new Error(`Docusaurus error: Duplicate values "${w.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===u?u:u??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==f&&!k.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:b}=(0,s.U)(),[C,N]=(0,a.useState)(f),E=[],{blockElementScrollPositionUntilNextRender:T}=(0,d.o5)();if(null!=h){const e=y[h];null!=e&&e!==C&&k.some((t=>t.value===e))&&N(e)}const x=e=>{const t=e.currentTarget,n=E.indexOf(t),o=k[n].value;o!==C&&(T(t),N(o),null!=h&&b(h,String(o)))},I=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=E.indexOf(e.currentTarget)+1;n=E[t]??E[0];break}case"ArrowLeft":{const t=E.indexOf(e.currentTarget)-1;n=E[t]??E[E.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,l.default)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.default)("tabs",{"tabs--block":r},g)},k.map((e=>{let{value:t,label:n,attributes:r}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>E.push(e),onKeyDown:I,onFocus:x,onClick:x},r,{className:(0,l.default)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":C===t})}),n??t)}))),n?(0,a.cloneElement)(v.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function m(e){const t=(0,r.Z)();return a.createElement(u,(0,o.Z)({key:String(t)},e))}},39021:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>h,default:()=>f,frontMatter:()=>m,metadata:()=>g,toc:()=>k});var o=n(87462),a=n(67294),l=n(3905),r=n(23660),i=n(76798);const s=(0,i.CY)("providers",{providers__content:"providers__content_Q5Ec","providers__content--connector":"providers__content--connector_vR3v"}),d=()=>{const{login:e,walletAddress:t,logout:n,getConnectors:o}=(0,r.useWallet)();return a.createElement("div",{className:s("content")},t?a.createElement(a.Fragment,null,a.createElement(i.II,{type:"p",variants:["detail"]},t),a.createElement(i.wg,{type:"secondary",onClick:n},"Logout")):o().map((t=>a.createElement(i.wg,{className:s("content",["connector"]),key:t.name,type:"secondary",onClick:()=>e(t)},"Connect to ",t.name))))},c=()=>a.createElement(r.WalletProvider,{client:(0,r.getClient)("Login"),correctNetworkId:80001,connectKitProps:{theme:"auto",mode:"dark"}},a.createElement(d,null));var p=n(65488),u=n(85162);const m={sidebar_position:3,description:"It covers the providers integration, finishing with the login and logout with your Metamask wallet provider."},h="Login with Wallet Provider",g={unversionedId:"tutorials/login-wallet-provider",id:"tutorials/login-wallet-provider",title:"Login with Wallet Provider",description:"It covers the providers integration, finishing with the login and logout with your Metamask wallet provider.",source:"@site/docs/tutorials/login-wallet-provider.md",sourceDirName:"tutorials",slug:"/tutorials/login-wallet-provider",permalink:"/docs/tutorials/login-wallet-provider",draft:!1,editUrl:"https://github.com/nevermined-io/docs/tree/main/docs/tutorials/login-wallet-provider.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"It covers the providers integration, finishing with the login and logout with your Metamask wallet provider."},sidebar:"tutorialSidebar",previous:{title:"How to build a React application integrated with Nevermined",permalink:"/docs/tutorials/build-first-react"},next:{title:"How to create and consume your first assets in a React application integrated with Nevermined",permalink:"/docs/tutorials/assets"}},v={},k=[{value:"Requirements",id:"requirements",level:2},{value:"How to install Catalog Provider",id:"how-to-install-catalog-provider",level:2},{value:"Add the wallet provider",id:"add-the-wallet-provider",level:2},{value:"Add login component",id:"add-login-component",level:2},{value:"Config your network (optional)",id:"config-your-network-optional",level:2},{value:"Lets put everything together",id:"lets-put-everything-together",level:2},{value:"Demo",id:"demo",level:2}],w={toc:k};function f(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,o.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"login-with-wallet-provider"},"Login with Wallet Provider"),(0,l.kt)("p",null,"In this tutorial you will learn how you can integrate Wallet Provider from the Catalog in your dapp and implement operations like login and logout"),(0,l.kt)("h2",{id:"requirements"},"Requirements"),(0,l.kt)("p",null,"For the tutorial you will need:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A extension of ",(0,l.kt)("a",{parentName:"li",href:"https://metamask.io/"},"Metamask")," installed in the browser"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"node")," and ",(0,l.kt)("a",{parentName:"li",href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"},"npm")," need to be installed")),(0,l.kt)("h2",{id:"how-to-install-catalog-provider"},"How to install Catalog Provider"),(0,l.kt)("p",null,"Firstable to install ",(0,l.kt)("a",{parentName:"p",href:"/docs/catalog/providers/"},"Catalog Provider")," you just need to run:"),(0,l.kt)(p.Z,{mdxType:"Tabs"},(0,l.kt)(u.Z,{label:"yarn",value:"yarn",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @nevermined-io/catalog-providers\n"))),(0,l.kt)(u.Z,{label:"npm",value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @nevermined-io/catalog-providers\n")))),(0,l.kt)("h2",{id:"add-the-wallet-provider"},"Add the wallet provider"),(0,l.kt)("p",null,"Now in our app we need to add the Wallet Provider as a parent of all the components that will use functionalities from it. The ",(0,l.kt)("inlineCode",{parentName:"p"},"WalletProvider")," has a prop call ",(0,l.kt)("inlineCode",{parentName:"p"},"client")," where we need to pass the instance of the ",(0,l.kt)("a",{parentName:"p",href:"https://wagmi.sh/docs/client"},"Wagmi client"),", the good news is that we have ",(0,l.kt)("inlineCode",{parentName:"p"},"getClient")," from ",(0,l.kt)("inlineCode",{parentName:"p"},"@nevermined-io/catalog-providers")," which will return a client already configured.\nOptionally we can pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"correctNetworkId")," which will request to the wallet to change to the set network when the current one is not supported, and ",(0,l.kt)("inlineCode",{parentName:"p"},"connectKitProps")," that includes all the customization option of ",(0,l.kt)("inlineCode",{parentName:"p"},"ConnectKit"),", see options ",(0,l.kt)("a",{parentName:"p",href:"https://docs.family.co/connectkit/customization"},"here")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Example from 'examples';\nimport { WalletProvider } from '@nevermined-io/catalog-providers';\n\nReactDOM.render(\n    <div>\n        <WalletProvider\n          client={getClient(ChainsConfig)}\n          correctNetworkId={80001}\n          connectKitProps={\n            {\n              theme: 'auto',\n              mode: 'dark',\n            }\n          }\n        >\n          <Login/>\n        </WalletProvider>\n    </div>,\n    document.getElementById(\"root\") as HTMLElement\n);\n")),(0,l.kt)("h2",{id:"add-login-component"},"Add login component"),(0,l.kt)("p",null,"Let's create a component that contains a login button for each provider, and other button to logout."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"const Login = () => {\n  const { login, walletAddress, logout, getConnectors} = useWallet()\n\n  return (\n    <div className={b('content')}>\n      {!walletAddress ?\n        getConnectors().map(c => \n          <UiButton key={c.name} className={b('content', ['connector'])} type='secondary' onClick={() => login(c)}>Connect to {c.name}</UiButton>\n        )\n        : \n        <>\n          <UiText type='p' variants={[\"detail\"]}>{walletAddress}</UiText>\n          <UiButton type='secondary' onClick={logout}>Logout</UiButton>\n        </>\n      }\n    </div>\n  )\n}\n")),(0,l.kt)("p",null,"In this component we have the ",(0,l.kt)("inlineCode",{parentName:"p"},"login")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"logout")," functions and the ",(0,l.kt)("inlineCode",{parentName:"p"},"walletAddress")," state, if ",(0,l.kt)("inlineCode",{parentName:"p"},"walletAddress")," is not empty means that the wallet is connected and will show the address and logout button otherwise will show the button to connect.\nHow you can see, we also have ",(0,l.kt)("inlineCode",{parentName:"p"},"getConnectors")," which includes all the providers available to connect."),(0,l.kt)("h2",{id:"config-your-network-optional"},"Config your network (optional)"),(0,l.kt)("p",null,"At least that you need to set differents networks for your dapp than ",(0,l.kt)("a",{parentName:"p",href:"https://polygon.technology/"},"polygon")," chains config is not needed, anyway here we show you how should look the config object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const ChainsConfig: Chain[] = [\n  Wagmi.chain.polygon,\n  Wagmi.chain.polygonMumbai,\n  {\n    id: 1337,\n    name: "Localhost development",\n    network: "spree",\n    nativeCurrency: {\n      name: "Ethereum",\n      symbol: "ETH",\n      decimals: 18,\n    },\n    rpcUrls: {\n      default: "http://localhost:8545"\n    },\n    testnet: true\n  },\n]\n\nexport default ChainConfig;\n')),(0,l.kt)("h2",{id:"lets-put-everything-together"},"Lets put everything together"),(0,l.kt)("p",null,"In order to finish we need to call this component inside of the providers, this is the complete example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react'\nimport { WalletProvider, getClient, useWallet, Wagmi } from '@nevermined-io/catalog-providers'\nimport { UiButton, UiText, BEM } from '@nevermined-io/styles'\nimport styles from './styles.module.scss'\n\nconst b = BEM('providers', styles)\n\nconst ChainsConfig: Chain[] = [\n  Wagmi.chain.polygon,\n  Wagmi.chain.polygonMumbai,\n  {\n    id: 1337,\n    name: \"Localhost development\",\n    network: \"spree\",\n    nativeCurrency: {\n      name: \"Ethereum\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpcUrls: {\n      default: \"http://localhost:8545\"\n    },\n    testnet: true\n  },\n]\n\nconst Login = () => {\n  const { login, walletAddress, logout, getConnectors} = useWallet()\n\n  return (\n    <div className={b('content')}>\n      {!walletAddress ?\n        getConnectors().map(c => \n          <UiButton key={c.name} className={b('content', ['connector'])} type='secondary' onClick={() => login(c)}>Connect to {c.name}</UiButton>\n        )\n        : \n        <>\n          <UiText type='p' variants={[\"detail\"]}>{walletAddress}</UiText>\n          <UiButton type='secondary' onClick={logout}>Logout</UiButton>\n        </>\n      }\n    </div>\n  )\n}\n\nReactDOM.render(\n    <div>\n        <WalletProvider\n          client={getClient('My Nevermined App', true, ChainConfig)}\n          correctNetworkId={80001}\n          connectKitProps={\n            {\n              theme: 'auto',\n              mode: 'dark',\n            }\n          }\n        >\n          <Login/>\n        </WalletProvider>\n    </div>,\n    document.getElementById(\"root\") as HTMLElement\n);\n")),(0,l.kt)("h2",{id:"demo"},"Demo"),(0,l.kt)(c,{mdxType:"ProvidersApp"}))}f.isMDXComponent=!0},88677:()=>{},62808:()=>{}}]);