"use strict";(self.webpackChunknvm_docs=self.webpackChunknvm_docs||[]).push([[9172],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),d=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=a,v=m["".concat(o,".").concat(u)]||m[u]||c[u]||i;return n?r.createElement(v,s(s({ref:t},p),{},{components:n})):r.createElement(v,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var d=2;d<i;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6660:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),s=["components"],l={},o="Namespace: EventService",d={unversionedId:"architecture/components/catalog/core/API/modules/EventService",id:"architecture/components/catalog/core/API/modules/EventService",title:"Namespace: EventService",description:"Table of contents",source:"@site/docs/architecture/components/catalog/core/API/modules/EventService.md",sourceDirName:"architecture/components/catalog/core/API/modules",slug:"/architecture/components/catalog/core/API/modules/EventService",permalink:"/docs/architecture/components/catalog/core/API/modules/EventService",draft:!1,editUrl:"https://github.com/nevermined-io/nvm-docs/tree/main/docs/architecture/components/catalog/core/API/modules/EventService.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Namespace: Catalog",permalink:"/docs/architecture/components/catalog/core/API/modules/Catalog"},next:{title:"Namespace: SubscribeService",permalink:"/docs/architecture/components/catalog/core/API/modules/SubscribeService"}},p={},c=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Functions",id:"functions",level:3},{value:"Functions",id:"functions-1",level:2},{value:"getAssetRegisterEvent",id:"getassetregisterevent",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"getTransfers",id:"gettransfers",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"getUserFulfilledEvents",id:"getuserfulfilledevents",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"getUserRegisterEvents",id:"getuserregisterevents",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4}],m={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"namespace-eventservice"},"Namespace: EventService"),(0,i.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,i.kt)("h3",{id:"functions"},"Functions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/architecture/components/catalog/core/API/modules/EventService#getassetregisterevent"},"getAssetRegisterEvent")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/architecture/components/catalog/core/API/modules/EventService#gettransfers"},"getTransfers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/architecture/components/catalog/core/API/modules/EventService#getuserfulfilledevents"},"getUserFulfilledEvents")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/architecture/components/catalog/core/API/modules/EventService#getuserregisterevents"},"getUserRegisterEvents"))),(0,i.kt)("h2",{id:"functions-1"},"Functions"),(0,i.kt)("h3",{id:"getassetregisterevent"},"getAssetRegisterEvent"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"getAssetRegisterEvent"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"sdk"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"did"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("a",{parentName:"p",href:"/docs/architecture/components/catalog/core/API/interfaces/RegisterEvent"},(0,i.kt)("inlineCode",{parentName:"a"},"RegisterEvent")),"[]",">"),(0,i.kt)("p",null,"Get asset registering event"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Catalog, EventService } from "@nevermined-io/catalog-core";\nimport { useState } from "react";\n\nconst MyComponent = () => {\n const [events, setEvents] = useState<Transfer[]>([]);\n const { sdk } = Catalog.useNevermined();\n\n useEffect(() => {\n     const handler = async () => {\n          const t: Transfer[] = await EventService.getAssetRegisterEvent(sdk, receiverAddress)          \n          setTransfers(t)\n     }\n }, [setEvents, sdk]);\n\n return (\n  <>\n     {events.map((p) => {\n         return (\n             <div>\n                 <div>{p._did}</div>\n                 <div>{p._owner}</div>\n                 <div>{p._lastUpdatedBy}</div>\n                 <div>{p._blockNumberUpdated}</div>\n             </div>\n         )\n     })}\n  </>\n )\n}\n')),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"sdk")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Nevermined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Nevermined instance")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"did")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"assets did")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("a",{parentName:"p",href:"/docs/architecture/components/catalog/core/API/interfaces/RegisterEvent"},(0,i.kt)("inlineCode",{parentName:"a"},"RegisterEvent")),"[]",">"),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/components-catalog/blob/658432b/lib/src/services/event.ts#L254"},"src/services/event.ts:254")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gettransfers"},"getTransfers"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"getTransfers"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"sdk"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"receiver"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"nftType?"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("a",{parentName:"p",href:"/docs/architecture/components/catalog/core/API/interfaces/Transfer"},(0,i.kt)("inlineCode",{parentName:"a"},"Transfer")),"[]",">"),(0,i.kt)("p",null,"Get recieved transfers by address and nft type"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Catalog, EventService } from "@nevermined-io/catalog-core";\nimport { useState } from "react";\n\nconst MyComponent = () => {\n const [transfers, setTransfers] = useState<Transfer[]>([]);\n const { sdk } = Catalog.useNevermined();\n\n useEffect(() => {\n     const handler = async () => {\n          const t: Transfer[] = await EventService.getTransfers(sdk, receiverAddress)          \n          setTransfers(t)\n     }\n }, [receiverAddress, sdk]);\n\n return (\n  <>\n     {transfers.map((p) => {\n         return (\n             <div>\n                 <div>{p.id}</div>\n                 <div>{p._did}</div>\n                 <div>{p._agreementId}</div>\n                 <div>{p._receiver}</div>\n             </div>\n         )\n     })}\n  </>\n )\n}\n')),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"sdk")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Nevermined")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Nevermined instance")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"receiver")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Transfers receiver address")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"nftType")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/docs/architecture/components/catalog/core/API/modules#nfttypes"},(0,i.kt)("inlineCode",{parentName:"a"},"NftTypes"))),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"1155")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Choose the NFT type. Default value 1155")))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("a",{parentName:"p",href:"/docs/architecture/components/catalog/core/API/interfaces/Transfer"},(0,i.kt)("inlineCode",{parentName:"a"},"Transfer")),"[]",">"),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/components-catalog/blob/658432b/lib/src/services/event.ts#L43"},"src/services/event.ts:43")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"getuserfulfilledevents"},"getUserFulfilledEvents"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"getUserFulfilledEvents"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"sdk"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"account"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("a",{parentName:"p",href:"/docs/architecture/components/catalog/core/API/interfaces/FulfilledOrders"},(0,i.kt)("inlineCode",{parentName:"a"},"FulfilledOrders")),"[]",">"),(0,i.kt)("p",null,"Get fullfilled nft transfer events by user address"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import Catalog from "@nevermined-io/catalog-core";\nimport { useState } from "react";\n\nconst MyComponent = () => {\n const [events, setEvents] = useState<Transfer[]>([]);\n const { getUserFulfilledEvents } = Catalog;\n const { sdk } = Catalog.useNevermined();\n\n useEffect(() => {\n     const handler = async () => {\n          const t: Transfer[] = await getUserFulfilledEvents(sdk, receiverAddress)          \n          setTransfers(t)\n     }\n }, [setEvents, sdk]);\n\n return (\n  <>\n     {events.map((p) => {\n         return (\n             <div>\n                 <div>{p.id}</div>\n                 <div>{p._documentId}</div>\n             </div>\n         )\n     })}\n  </>\n )\n}\n')),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"sdk")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Nevermined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Nevermined instance")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"account")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"user address")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("a",{parentName:"p",href:"/docs/architecture/components/catalog/core/API/interfaces/FulfilledOrders"},(0,i.kt)("inlineCode",{parentName:"a"},"FulfilledOrders")),"[]",">"),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/components-catalog/blob/658432b/lib/src/services/event.ts#L114"},"src/services/event.ts:114")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"getuserregisterevents"},"getUserRegisterEvents"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"getUserRegisterEvents"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"sdk"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"owner"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("a",{parentName:"p",href:"/docs/architecture/components/catalog/core/API/interfaces/RegisterEvent"},(0,i.kt)("inlineCode",{parentName:"a"},"RegisterEvent")),"[]",">"),(0,i.kt)("p",null,"Get nft creating events registered by user"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Catalog, EventService } from "@nevermined-io/catalog-core";\nimport { useState } from "react";\n\nconst MyComponent = () => {\n const [events, setEvents] = useState<Transfer[]>([]);\n const { sdk } = Catalog.useNevermined();\n\n useEffect(() => {\n     const handler = async () => {\n          const t: Transfer[] = await EventService.getUserRegisterEvents(sdk, receiverAddress)          \n          setTransfers(t)\n     }\n }, [setEvents, sdk]);\n\n return (\n  <>\n     {events.map((p) => {\n         return (\n             <div>\n                 <div>{p.id}</div>\n                 <div>{p._did}</div>\n                 <div>{p._owner}</div>\n                 <div>{p._lastUpdatedBy}</div>\n                 <div>{p._blockNumberUpdated}</div>\n             </div>\n         )\n     })}\n  </>\n )\n}\n')),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"sdk")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Nevermined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Nevermined instance")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"owner")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"user address of events publisher")))),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("a",{parentName:"p",href:"/docs/architecture/components/catalog/core/API/interfaces/RegisterEvent"},(0,i.kt)("inlineCode",{parentName:"a"},"RegisterEvent")),"[]",">"),(0,i.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/components-catalog/blob/658432b/lib/src/services/event.ts#L183"},"src/services/event.ts:183")))}u.isMDXComponent=!0}}]);